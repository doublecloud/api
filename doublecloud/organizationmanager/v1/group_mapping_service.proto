syntax = "proto3";

package doublecloud.organizationmanager.v1;

import "google/protobuf/duration.proto";
import "doublecloud/organizationmanager/v1/group_mapping.proto";
import "doublecloud/v1/operation.proto";

option go_package = "github.com/doublecloud/go-genproto/doublecloud/organizationmanager/v1;organizationmanager";

// RPC service dedicated for federation group mapping.
service GroupMappingService {
    // Returns a group mapping configured for the specific federation
    // If a federation does not exist this call will return an error
    //    NOT_FOUND will be returned
    // If a federation exist, but has not ever been configured for group mapping
    //   the call FAILED_PRECONDITION will be returned.
    rpc Get (GetGroupMappingRequest) returns (GetGroupMappingResponse);
    // Adds a group mapping for a federation
    // If mapping already exist, ALREADY_EXISTS will be returned
    rpc Create (CreateGroupMappingRequest) returns (doublecloud.v1.Operation) {}
    // Updates an existing group mapping for a federation
    // Errors:
    // - if federation is not found
    // In case of any error, no changes are applied to existing group mapping
    //
    // This call is idempotent. The following actions do nothing:
    // - enabling when already enabled
    // - disabling when disabled
    // Such parts of request will be ignored. Others will be applied.
    rpc Update (UpdateGroupMappingRequest) returns (doublecloud.v1.Operation) {}
    // Deletes a group mapping. This will remove all the mapping items
    // cascade.
    rpc Delete (DeleteGroupMappingRequest) returns (doublecloud.v1.Operation) {}
    // Returns all the group mappings items
    //
    // Filtering is only supported by external_group_id or internal_group_id
    rpc ListItems(ListGroupMappingItemsRequest) returns (ListGroupMappingItemsResponse);
    // Updates group mapping items for a specified federation
    // Errors:
    // - if federation is not found
    // - if internal group in the mapping added does not exist
    // In case of any error, no changes are applied to existing group mapping
    //
    // This call is idempotent. The following actions do nothing:
    // - adding group mapping items that are already present
    // - removing group mapping items that are not present
    // Such parts of request will be ignored. Others will be applied.
    rpc UpdateItems(UpdateGroupMappingItemsRequest) returns (doublecloud.v1.Operation) {}
}

message GetGroupMappingRequest {
    string federation_id = 1;
}

message GetGroupMappingResponse {
    GroupMapping group_mapping = 1;
}

message CreateGroupMappingRequest {
    // Federation the group mapping will be created for
    string federation_id = 1;
    // Synchronization status.
    bool enabled = 3;
}

message CreateGroupMappingMetadata {
    string federation_id = 1;
}

// Request for updating group mapping configuration
message UpdateGroupMappingRequest {
    // Federation the group mapping update is requested
    string federation_id = 1;
    // A new state of synchronization to update (if mentioned in update_mask).
    bool enabled = 3;
}

message UpdateGroupMappingMetadata {
    string federation_id = 1;
}

message DeleteGroupMappingRequest {
    // Federation the group mapping deletion is requested
    string federation_id = 1;
}

message DeleteGroupMappingMetadata {
    string federation_id = 1;
}

// Request for updating group mapping configuration
message UpdateGroupMappingItemsRequest {
    // Federation the group mapping update is requested
    string federation_id = 1;
    // A collection of mapping items to add or remove (ignores update_fields).
    repeated GroupMappingItemDelta group_mapping_item_deltas = 4;
}

// Message describes the user's request to change (add or remove) a single group mapping.
message GroupMappingItemDelta {
    GroupMappingItem item = 1;
    Action action = 2;
    enum Action {
        ACTION_UNSPECIFIED = 0;
        // Group mapping item is to be added
        ADD = 1;
        // Group mapping item is to be removed
        REMOVE = 2;
    }
}

message UpdateGroupMappingItemsMetadata {
    string federation_id = 1;
}

message UpdateGroupMappingItemsResponse {
    // Effective changes that were applied
    repeated GroupMappingItemDelta group_mapping_item_deltas = 4;
}

message ListGroupMappingItemsRequest {
    string federation_id = 1;
    int64 page_size = 2;
    string page_token = 3;
    string filter = 4;
}

message ListGroupMappingItemsResponse {
    repeated GroupMappingItem group_mapping_items = 1;
    string next_page_token = 2;
}
