syntax = "proto3";

package doublecloud.transfer.v1.endpoint;

option go_package = "github.com/doublecloud/go-genproto/doublecloud/transfer/v1/endpoint;endpoint";

import "doublecloud/transfer/v1/endpoint/common.proto";

enum ProtoMessagePackageType {
    PROTO_MESSAGE_PACKAGE_TYPE_UNSPECIFIED = 0;
    PROTOSEQ = 1;
    REPEATED = 2;
    SINGLE_MESSAGE = 3;
}
message Parser {
    reserved 2 to 4, 8;
    oneof parser {
        GenericParserCommon json_parser = 1;
        DebeziumCDCParser debezium_cdc_parser = 5;
        GenericParserCommon tskv_parser = 6;
        ConfluentSchemaRegistryParser confluent_schema_registry_parser = 7;
        BlankParser blank_parser = 9;
        RawTable raw_table = 10;
    }
}
message GenericParserCommon {
    DataSchema data_schema = 1;
    // Allow null keys, if no - null keys will be putted to unparsed data
    bool null_keys_allowed = 2;
    // Will add _rest column for all unknown fields
    bool add_rest_column = 3;
}
message DebeziumCDCParser {
}
message ConfluentSchemaRegistryConnection {
    // Schema Registry api url
    string schema_registry_url = 1;
    // TLS settings for server connection. Disabled by default.
    TLSMode tls_mode = 2;
    // Schema Registry authentication config
    ConfluentSchemaRegistryAuth auth = 3;
}
message ConfluentSchemaRegistryParser {
    reserved 1 to 3;
    ConfluentSchemaRegistryConnection connection = 4;
}
message ConfluentSchemaRegistryAuth {
    oneof confluent_schema_registry_auth {
        NoAuth no_auth = 1;
        BasicAuthSR basic = 2;
    }
}
message BasicAuthSR {
    // User
    string user = 1;
    // Password for user
    Secret password = 2;
}
message ProtoParser {
    ProtoDesc proto_desc = 1;
    ProtoMessagePackageType msg_package_type = 2;
    // If package type is repeated - name of message containing repeated target field;
    // else - name of target message
    string msg_name = 3;
    repeated string primary_keys = 4;
    ProtoDataSchema included_fields = 5;
    // Allow null keys, if no - null keys will be putted to unparsed data
    bool null_keys_allowed = 6;
}
message ProtoDesc {
    oneof desc {
        bytes desc_file = 1;
    }
}
message ProtoDataSchema {
    oneof schema {
        ColumnParamsList col_params_list = 1;
    }
}
message ColumnParamsList {
    repeated ColumnParams col_params = 1;
}
message ColumnParams {
    string name = 1;
    bool required = 2;
}
message BlankParser {
}
message RawTable {
    reserved 1;
    bool value_as_bytes = 2;
    bool keys_as_bytes = 3;
    bool add_timestamp = 4;
    bool add_headers = 5;
    bool add_key = 6;
}
