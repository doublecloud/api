syntax = "proto3";

package doublecloud.clickhouse.v1;

option go_package = "github.com/doublecloud/api/doublecloud/clickhouse/v1;clickhouse";

import "google/protobuf/timestamp.proto";
import "doublecloud/v1/operation.proto";
import "doublecloud/v1/paging.proto";
import "doublecloud/clickhouse/v1/backup.proto";
import "doublecloud/clickhouse/v1/cluster.proto";
import "doublecloud/clickhouse/v1/config.proto";
import "doublecloud/v1/cluster.proto";
import "doublecloud/v1/maintenance.proto";

// A set of methods for managing ClickHouse clusters.
service ClusterService {
    // Returns the specified ClickHouse cluster.
    rpc Get(GetClusterRequest) returns (Cluster);
    // Retrieves a list of ClickHouse clusters that belong to the specified project.
    rpc List(ListClustersRequest) returns (ListClustersResponse);
    // Creates a ClickHouse cluster in the specified project.
    rpc Create(CreateClusterRequest) returns (doublecloud.v1.Operation);
    // Updates the specified ClickHouse cluster.
    rpc Update(UpdateClusterRequest) returns (doublecloud.v1.Operation);
    // Deletes the specified ClickHouse cluster.
    rpc Delete(DeleteClusterRequest) returns (doublecloud.v1.Operation);
    // Reset credentials for the specified cluster.
    rpc ResetCredentials(ResetClusterCredentialsRequest) returns (doublecloud.v1.Operation);
    // Retrieves a list of hosts for the specified cluster.
    rpc ListHosts(ListClusterHostsRequest) returns (ListClusterHostsResponse);
    // Creates a new ClickHouse cluster from the specified backup.
    rpc Restore(RestoreClusterRequest) returns (doublecloud.v1.Operation);
    // Returns the list of available backups for the specified ClickHouse cluster.
    rpc ListBackups(ListClusterBackupsRequest) returns (ListClusterBackupsResponse);
    // Starts stopped ClickHouse cluster.
    rpc Start(StartClusterRequest) returns (doublecloud.v1.Operation);
    // Stops running ClickHouse cluster.
    rpc Stop(StopClusterRequest) returns (doublecloud.v1.Operation);
    // Reschedule planned maintenance operation.
    rpc RescheduleMaintenance(RescheduleMaintenanceRequest) returns (doublecloud.v1.Operation);
    // List cluster operations.
    rpc ListOperations(ListClusterOperationsRequest) returns (ListClusterOperationsResponse);
}
enum ClusterView {
    // Invalid cluster view value.
    CLUSTER_VIEW_INVALID = 0;
    // Output basic information about the cluster.
    CLUSTER_VIEW_BASIC = 1;
    // Output full information about the cluster including allocated resources and
    // ClickHouse settings.
    CLUSTER_VIEW_FULL = 2;
}
message GetClusterRequest {
    // ID of the ClickHouse cluster resource to return.
    string cluster_id = 1;
    // Whether to include sensitive data in the response. If unspecified, defaults to
    // false.
    bool sensitive = 2;
}
message ListClustersRequest {
    // ID of the project to list ClickHouse clusters in.
    string project_id = 1;
    // Paging information of the request
    doublecloud.v1.Paging paging = 2;
    // The level of detail to be returned. If unspecified, defaults to
    // CLUSTER_VIEW_BASIC.
    ClusterView view = 3;
}
message ListClustersResponse {
    // List of ClickHouse cluster resources.
    repeated Cluster clusters = 1;
    // Pagination information of the response
    doublecloud.v1.NextPage next_page = 2;
}
message CreateClusterRequest {
    // ID of the project to create the ClickHouse cluster in.
    string project_id = 1;
    // Type of the cloud where instances should be hosted.
    string cloud_type = 2;
    // ID of the region to place instances.
    string region_id = 3;
    // Name of the ClickHouse cluster. The name must be unique within the project.
    string name = 4;
    // Description of the ClickHouse cluster.
    string description = 5;
    // Version of ClickHouse DBMS.
    string version = 6;
    // Resources allocated to the ClickHouse cluster.
    ClusterResources resources = 7;
    // Access settings
    doublecloud.v1.Access access = 8;
    // DataEncryption settings
    doublecloud.v1.DataEncryption encryption = 9;
    // ID of the network to create ClickHouse cluster in.
    string network_id = 10;
    // ClickHouse server configuration.
    ClickhouseConfig clickhouse_config = 11;
    // Window of maintenance operations.
    doublecloud.v1.MaintenanceWindow maintenance_window = 12;
}
message UpdateClusterRequest {
    // ID of the ClickHouse cluster resource to update.
    // To get the ClickHouse cluster ID, use a [ClusterService.List] request.
    string cluster_id = 1;
    // New name for the cluster.
    string name = 2;
    // New description of the ClickHouse cluster.
    string description = 3;
    // Version of ClickHouse DBMS.
    string version = 4;
    // Resources allocated to the ClickHouse cluster.
    ClusterResources resources = 5;
    // Access settings
    doublecloud.v1.Access access = 6;
    // ClickHouse server configuration.
    ClickhouseConfig clickhouse_config = 7;
    // Window of maintenance operations.
    doublecloud.v1.MaintenanceWindow maintenance_window = 8;
}
message DeleteClusterRequest {
    // ID of the ClickHouse cluster to delete.
    // To get the ClickHouse cluster ID, use a [ClusterService.List] request.
    string cluster_id = 1;
}
message ResetClusterCredentialsRequest {
    // ID of the ClickHouse cluster to reset credentials.
    // To get the ClickHouse cluster ID, use a [ClusterService.List] request.
    string cluster_id = 1;
}
message ListClusterHostsRequest {
    // ID of the ClickHouse cluster to list hosts in.
    string cluster_id = 1;
    // Paging information of the request
    doublecloud.v1.Paging paging = 2;
}
message ListClusterHostsResponse {
    // Requested list of hosts for the cluster.
    repeated Host hosts = 1;
    // Pagination information of the response
    doublecloud.v1.NextPage next_page = 2;
}
message RestoreClusterRequest {
    // Required. ID of the backup to restore from.
    string backup_id = 1;
    // ID of the project to create the ClickHouse cluster in.
    string project_id = 2;
    // ID of the region to place instances.
    string region_id = 3;
    // Name of the ClickHouse cluster. The name must be unique within the project.
    string name = 4;
    // Description of the ClickHouse cluster.
    string description = 5;
    // Version of ClickHouse DBMS.
    string version = 6;
    // Resources allocated to the ClickHouse cluster.
    ClusterResources resources = 7;
    // Security settings
    doublecloud.v1.Access access = 8;
    // DataEncryption settings
    doublecloud.v1.DataEncryption encryption = 9;
    // ID of the network to create ClickHouse cluster in.
    string network_id = 10;
    // ClickHouse server configuration.
    ClickhouseConfig clickhouse_config = 11;
    // Window of maintenance operations.
    doublecloud.v1.MaintenanceWindow maintenance_window = 12;
}
message ListClusterBackupsRequest {
    // Required. ID of the ClickHouse cluster.
    string cluster_id = 1;
    // Paging information of the request
    doublecloud.v1.Paging paging = 2;
}
message ListClusterBackupsResponse {
    // Requested list of backups.
    repeated Backup backups = 1;
    // Pagination information of the response
    doublecloud.v1.NextPage next_page = 2;
}
message StartClusterRequest {
    // ID of the ClickHouse cluster to start.
    string cluster_id = 1;
}
message StopClusterRequest {
    // ID of the ClickHouse cluster to stop.
    string cluster_id = 1;
}
message RescheduleMaintenanceRequest {
    // Required. ID of the ClickHouse cluster to maintenance reschedule.
    string cluster_id = 1;
    // Required. The type of reschedule request.
    doublecloud.v1.RescheduleType reschedule_type = 2;
    // The time for SPECIFIC_TIME reschedule. Limited by two weeks since first time
    // scheduled.
    google.protobuf.Timestamp delayed_until_time = 3;
}
message ListClusterOperationsRequest {
    // Required. ID of the ClickHouse cluster.
    string cluster_id = 1;
    // Paging information of the request
    doublecloud.v1.Paging paging = 2;
}
message ListClusterOperationsResponse {
    repeated doublecloud.v1.Operation operations = 1;
    // Pagination information of the response
    doublecloud.v1.NextPage next_page = 2;
}
